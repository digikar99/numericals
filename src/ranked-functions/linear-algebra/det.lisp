(numericals.common:compiler-in-package numericals.common:*compiler-package*)

(5am:in-suite nu::array)

(define-polymorphic-function la:det (array-like &key out) :overwrite t
  :documentation "Calculate the determinant of 2D matrices given by ARRAY-LIKE")

(defpolymorph la:det ((a (simple-array <type> 2)) &key ((out null)))
    number
  (declare (ignore out))
  (let* ((layout (eigen-array-layout a))
         (m (nu:array-dimension a 0))
         (n (nu:array-dimension a 1))
         (c-name (c-name <type> 'la:det)))
    (declare (ignorable m n))
    (policy-cond:with-expectations (= 0 safety)
        ((assertion (= m n) ()
                    "Computing determinant needs a square matrix~%but a matrix of shape ~A was supplied"
                    (narray-dimensions a)))
      (pflet ((sv (array-storage a)))
        (declare (type (cl:simple-array <type> 1) sv))
        (with-pointers-to-vectors-data ((ptr sv))
          (inline-or-funcall c-name m ptr layout))))))

(defun out-shape-compatible-for-det-p (a out)
  (declare (type simple-array a out)
           (optimize speed))
  (let ((rank (nu:array-rank a)))
    (and (= (- rank 2) (nu:array-rank out))
         (if (< rank 2)
             nil
             (and (loop :for d1 :of-type (integer 0 #.array-dimension-limit)
                          :in (narray-dimensions a)
                        :for d2 :of-type (integer 0 #.array-dimension-limit)
                          :in (narray-dimensions out)
                        :repeat (- rank 2)
                        :always (= d1 d2))
                  (= (array-dimension a (- rank 1))
                     (array-dimension a (- rank 2))))))))

(defpolymorph la:det ((a (simple-array <type>)) &key ((out (simple-array <type>))))
    (simple-array <type>)
  (policy-cond:with-expectations (= 0 safety)
      ((assertion (out-shape-compatible-for-det-p a out)
                  ()
                  "Cannot compute determinant of array of shape ~A~%into array of shape ~A."
                  (narray-dimensions a) (narray-dimensions out)))
    (let* ((c-size (c-size <type>))
           (a-layout (eigen-array-layout a))
           (rank   (nu:array-rank a))
           (m (nu:array-dimension a (- rank 2)))
           (c-name (c-name <type> 'la:det))
           (c-type (c-type <type>)))
      (flet ((solve (a-size a-ptr a-dims o-ptr o-dims)
               (declare (ignore a-size a-dims o-dims))
               (inline-or-funcall #'(setf fref)
                                  (inline-or-funcall c-name m a-ptr a-layout)
                                  o-ptr c-type)))
        (with-simple-array-broadcast (solve 2 0) (a c-size) (out c-size)))
      out)))

(defun out-shape-for-det (a)
  (declare (type simple-array a)
           (optimize speed))
  (let ((rank (nu:array-rank a)))
    (if (< rank 2)
        (error "Computing determinant needs an array of at least two dimensions")
        (subseq (narray-dimensions a) 0 (- rank 2)))))

(defpolymorph (la:det :inline t) ((a (simple-array <type>)) &key ((out null)))
    (or number (simple-array <type>))
  (declare (ignore out))
  (if (= 2 (nu:array-rank a))
      (pflet ((a a))
        (declare (type (simple-array <type> 2) a))
        (la:det a))
      (pflet ((out (nu:empty (out-shape-for-det a) :type <type>)))
        (declare (type (simple-array <type>) out))
        (la:det a :out out))))

(defpolymorph (la:det :inline t) ((a list) &key ((out null)))
    (or number simple-array)
  (declare (ignore out))
  (la:det (nu:asarray a :type nu:*default-float-format*)))

(defpolymorph (la:det :inline t) ((a list) &key ((out (simple-array <type>))))
    (simple-array <type>)
  (la:det (nu:asarray a :type <type>) :out out))
