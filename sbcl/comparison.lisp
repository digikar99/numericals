(in-package :numericals.sbcl)

(macrolet ((define-binary-vop-comparison-operation (name avx2-operation)
             `(eval-when (:compile-toplevel :load-toplevel :execute)
                (defknown (,name)
                    ((simd-pack-256 single-float) (simd-pack-256 single-float))
                    (simple-bit-vector 8)
                    (movable flushable always-translatable)
                  :overwrite-fndb-silently t)
                (define-vop (,name)
                  (:translate ,name)
                  (:policy :fast-safe)
                  (:args (a :scs (single-avx2-reg))
                         (b :scs (single-avx2-reg)))
                  (:arg-types simd-pack-256-single simd-pack-256-single)
                  (:results (dest :scs (sb-vm::unsigned-reg)))
                  (:result-types simple-bit-vector)
                  (:generator 1 ;; TODO: what should be the cost?
                              (inst vcmpps ,avx2-operation dest a b)))))) 

  (define-binary-vop-comparison-operation %simd-single-< :le))

(defun simd-single-< (a b)
  (declare (optimize speed))
  (%simd-single-< a b))

(defun foo ()
  (declare (optimize speed))
  (subseq #*01010101 1 5))

(macrolet ((define-binary-vop-comparison-operation (name avx2-operation)
             `(eval-when (:compile-toplevel :load-toplevel :execute)
                (defknown (,name)
                    ((simd-pack-256 single-float) (simd-pack-256 single-float))
                    (simd-pack-256 integer)
                    (movable flushable always-translatable)
                  :overwrite-fndb-silently t)
                (define-vop (,name)
                  (:translate ,name)
                  (:policy :fast-safe)
                  (:args (a :scs (single-avx2-reg))
                         (b :scs (single-avx2-reg)))
                  (:arg-types simd-pack-256-single simd-pack-256-single)
                  (:results (dest :scs (int-avx2-reg)))
                  (:result-types simd-pack-256-int)
                  (:generator 1 ;; TODO: what should be the cost?
                              (inst vcmpps ,avx2-operation dest a b)))))) 

  (define-binary-vop-comparison-operation %simd-single-< :le))

(defparameter x (%make-simd-pack-256-single 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0))
(defparameter y (%make-simd-pack-256-single 1.1 2.0 3.0 4.0 5.0 6.0 7.0 8.0))

(defun simd-single-< (a b)
  (declare (optimize speed))
  (%simd-single-< a b))
